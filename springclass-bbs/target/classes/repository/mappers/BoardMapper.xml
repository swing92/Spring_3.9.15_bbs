<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	맵퍼의 namespace 속성은 맵핑 구문을 그룹핑 하는 역할을 한다.
	여러 맵퍼에서 맵핑 구문의 id 속성의 값이 중복되더라도 namespace와
	맵핑 구문의 id 속성에 지정한 값을 합쳐서 호출하기 때문에 맵핑 구문이
	중복되지 않게 분류하여 관리할 수 있다.
	테이블 이름을 바탕으로 namespace를 지정하고 맵핑 구문의 id 속성의
	값은 SQL 문의 맥락에 따라서 명명하는 것이 일반적 이다.
	
	parameterType 속성에는 주로 SQL 문의 조건에 사용할 파라미터의
	데이터 타입을 지정하는 속성으로 자바 원시 타입(기본 타입, String)과 자바빈,
	Map과 같은 타입을 지정할 수 있다. resultType 속성도 parameterType
	속성에서 지정한 타입을 많이 사용한다. parameterType과 resultType에
	지정할 데이터 타입이 자바 원시 타입이면 생략가능하다.
	
	마이바티스 참고 사이트
	  - http://blog.mybatis.org/
	  - http://www.mybatis.org/mybatis-3/ko/index.html
-->
<mapper namespace="com.springclass.bbs.mapper.BoardMapper" >
	
	<!-- table의 컬럼명은 언더스코어표기법("_")을 주로 사용 -->
	<!-- class의 인스턴스 멤버는 카멜표기법을 주로 사용 -->
	<!-- 고로 컬럼명이랑 모델클래스의 프로퍼티 이름을 맞춰줘야함. 안한다고 오류가 나는건 아닌데 데이터를 못읽어와 -->
	
	<resultMap id="boardResultMap" type="Board">
		<id property="no" column="no"/>
		<result property="title" column="title"/>
		<result property="writer" column="writer"/>
		<result property="content" column="content"/>
		<result property="regDate" column="reg_date"/>
		<result property="readCount" column="read_count"/>
		<result property="pass" column="pass"/>
		<result property="file1" column="file1"/>
	</resultMap>
	
	<!-- 게시글 리스트 가져오는 맵핑구문 -->
	<select id="boardList" resultType="Board" resultMap="boardResultMap" parameterType="hashmap">
		<!-- SELECT * FROM springbbs ORDER BY no DESC -->
		
		<!-- (수정)한 페이지에 해당하는 게시글 리스트 가져오는 맵핑으로 수정 -->
		<!-- SELECT * FROM springbbs ORDER BY no DESC LIMIT #{startRow}, #{num} -->
		<!-- LIMIT : MySQL에서 제공하는 명령어, 검색된 데이터의 특정 행 번호부터 지정한 개수만큼 행을 읽어오는 명령어 -->
		<!-- 		 LIMIT 시작행, 가져올 데이터의 개수 -->
		<!-- DAO에서 startRow랑 num을 HashMap에 저장해서 넘겨줬기 때문에 parameterType="hashmap" 추가 -->
		
		<!-- (수정의 수정)한 페이지에 해당하는 게시글 리스트, 검색리스트를 가져오는 맵핑구문으로 수정 -->
		SELECT * FROM springbbs
		<where>
			<!-- where절을 동적으로 생성하는 요소 -->
			<!-- if절이 true일 때 생성 -->
			<!-- SQL에서 사용할 파라미터를 HashMap으로 받음, 사용 시에는 key이름으로 -->
			<!-- 조건절에서는 #{} 없이 파라미터 이름만 지정하며 문자열은 ""나 ''로 감싸줘야 함 -->
			<!-- 부등호 사용 시 XML에서 태그로 사용되는 문자라서 문제 발생하므로 CDATA Section으로 묶어줘야함 -->
			<!-- CDATA(Character DATA) : CDATA Section 안에 있는 데이터는 해석(Parsing)하지 말ㄹ고 문자 데이터 그대로 처리하라는 의미 -->
			<if test="type == 'title'">
				title LIKE CONCAT('%', #{keyword},'%')
			</if>
			<if test="type == 'writer'">
				writer LIKE CONCAT('%', #{keyword},'%')
			</if>
			<if test="type == 'content'">
				content LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
		ORDER BY no DESC LIMIT #{startRow}, #{num}
	</select>
	
	<!-- 전체 게시글 수를 반환하는 맵핑구문 -->
<!-- 	<select id="getBoardCount" resultType="int">
		SELECT COUNT(no) FROM springbbs
		참고 : COUNT함수는 null값은 개수에서 제외함
	</select> -->
	
	<!-- (수정)전체 게시글 수와 검색리스트에 대한 게시글 수를 반환하는 맵핑구문 -->
	<select id="getBoardCount" parameterType="hashmap" resultType="int">
		<!-- DAO에서 type과 keyword를 HashMap으로 넘겨줬으니 parameterType="hashmap"으로 지정 -->
		SELECT COUNT(no) FROM springbbs
		<!-- where절 안에 해당하는게 있으면 where절이 생성되어 검색리스트에 대한 게시글 수를 조회 -->
		<where>
			<!-- 게시글 리스트 요청 : type == null, keywork == null -->
			<if test="type == 'title'">
				<!-- 제목으로 검색 -->
				title LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="type == writer">
				<!-- 글쓴이로 검색 -->
				writer LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="type == content">
				<!-- 게시글 내용으로 검색 -->
				content LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
	</select>
	
	
	
	<!-- (추가)no에 해당하는 게시글의 읽은 횟수(read_count)를 증가시키는 맵핑구문 -->
	<update id="incrementReadCount">
		UPDATE springbbs SET read_count = read_count + 1 WHERE no=#{no}
		<!-- 				 read_count += 1 이거는 안됨ㅋㅋㅋㅋ -->
	</update>
	
	
	<!-- resultMap 태그로 정의한 id를 지정하면 SQL쿼리에 컬럼명의 별칭을 사용하지 않고 자바 모델 객체로 변환가능 -->
	<!-- BoardDao에서 no에 해당하는 게시글을 조회할 때 기본형인 no를 selectOne()메소드의 두 번째 인수로 지정했기 때문에 parameterType 생략 가능 -->
	<!-- >>>>>>> return sqlSession.selectOne(NAME_SPACE + ".getBoard", no); <<<<<<< -->
	<!-- SQL문의 조건에 사용할 파라미터는 #{}로 감싸서 지정하면 됨 -->
	
	<!-- no에 해당하는 게시글 하나를 가져오는 맵핑구문 -->
	<select id="getBoard" resultType="Board" resultMap="boardResultMap">
		SELECT * FROM springbbs WHERE no = #{no}
	</select>
	
	
	<!-- 
		parameterType에 모델 클래스 타입을 지정하는 경우 VALUES()에 지정하는 값은 getter 메서드를 지정하는 것이 아니라
		클래스의 프로퍼티(인스턴스 변수)를 #{}로 감싸서 지정하면 MyBatis가 알아서 처리해 줌
	 -->
	 <!-- SqlSessionTemplate의 insert() 메서드의 반환 타입이 int 이므로 resultType은 생략 가능 -->
	 <!-- 
	 	테이블에 하나의 레코드를 INSERT 할때 자동으로 증가되는 컬럼이나 Sequence를 사용하는 컬럼의 값을 읽어 와야 할 때도 있다.
		보통 자동 증가되는 컬럼의 값은 데이터가 INSERT 된 후에 읽어오고, Sequence일 경우 INSERT 이전에 값을 읽어 와야 한다.
		이렇게 INSERT 작업을 하면서 생성된 키의 값을 읽어 와야 할 경우 useGeneratedKeys="true"를 지정하고
		자동 생성된 키의 값을 설정할 자바 모델 객체의 프로퍼티 이름을 keyProperty에 지정하면
		Board 객체의 no 프로퍼티에 값을 설정해 준다. -->
	
	<!-- 게시글을 테이블에 추가하는 맵핑구문 -->
	<insert id="insertBoard" parameterType="Board" useGeneratedKeys="true" keyProperty="no">
		INSERT INTO springbbs(title, writer, content, reg_date, read_count, pass) VALUES(#{title}, #{writer}, #{content}, SYSDATE(), #{readCount}, #{pass})
	</insert>
	
	
	<!-- DAO클래스의 isPassCheck(int no, String pass) 메소드에서 사용하는 맵핑구문 -->
	<!-- DAO에서 게시글 번호인 no에 해당하는 게시글의 비밀번호를 조회할 때 selectOne()메소드의 두번째 인수로 기본형인 no를 지정했기 때문에 parameterType 생략 가능 -->
	
	<!-- 게시판 테이블에서 no에 해당하는 게시글의 비밀번호를 가져오는 맵핑구문 -->
	<select id="isPassCheck" resultType="String">
		SELECT pass FROM springbbs WHERE no = #{no}
	</select>
	
	
	<!-- 게시판 테이블에서 no에 해당하는 게시글을 수정하는 맵핑구문 -->
	<!-- DAO클래스의 updateBoard(Board board) 매소드에서 사용 -->
	<update id="updateBoard" parameterType="Board">
		UPDATE springbbs SET title = #{title}, content = #{content}, reg_date = SYSDATE() WHERE no = #{no}
	</update>
	
	
	<!-- no에 해당하는 게시글을 DB에서 삭제 -->
	<!-- 게시글 삭제 요청 시 호출되는 메소드 -->
	<delete id="deleteBoard">
		DELETE FROM springbbs WHERE no = #{no}
	</delete>
	
</mapper>	



