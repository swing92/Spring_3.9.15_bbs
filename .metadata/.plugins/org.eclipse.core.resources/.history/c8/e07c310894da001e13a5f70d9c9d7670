package com.springclass.bbs.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.springclass.bbs.domain.Board;
import com.springclass.bbs.service.BoardService;

@Controller // 스프링 MVC의 컨트롤러임을 선언
// Controller는 요청을 처리한 결과데이터를 Model에 담아 view로 전달
// Spring은 Controller에서 Model에 data를 담는 다양한 방법을 제공하는데 파라미터에 Model을 지정하는 방식이 많이 사용됨
public class BoardController {
	
	@Autowired
	private BoardService boardService;
	
	public void setBoardService(BoardService boardService) {
		this.boardService = boardService;
	}
	
	// @RequestMapping은 클래스, 메소드 레벨에 지정할 수 있음
	// @RequestMapping의 ()에 처리할 요청 URI만 지정할 때는 value속성 생략
	// 다른 속성을 같이 지정할 경우에는 value속성에 처리할 요청 URI를 지정해야함
	// method 속성을 생략하면 GET, POST방식 모두 가능
	// @RequestMapping Annotaion이 적용된 메소드의 파라미터에 Model을 지정하면
	// Spring이 이 메소드를 호출하면서 Model타입의 객체를 넘겨줌
	// 그래서 이 Model을 받아 이 객체에 결과 데이터를 담기만 하면 뷰로 전달됨
	
	// 게시글 리스트 보기 요청을 처리하는 메소드
	@RequestMapping(value= {"/boardList", "/list"}, method = RequestMethod.GET)
	public String boardList(Model model) {
		
		// Service 클래스를 이용해 게시글 리스트를 가져옴
		List<Board> bList = boardService.boardList();
		
		// 파라미터로 받은 Model객체에 view로 보낼 모델을 저장
		// Model에는 도메인 객체(Board)나 비즈니스 로직(Service)을 처리한 결과를 저장
		model.addAttribute("bList", bList);
		
		// 
		return "boardList";
	}
}
