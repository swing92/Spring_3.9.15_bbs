<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	맵퍼의 namespace 속성은 맵핑 구문을 그룹핑 하는 역할을 한다.
	여러 맵퍼에서 맵핑 구문의 id 속성의 값이 중복되더라도 namespace와
	맵핑 구문의 id 속성에 지정한 값을 합쳐서 호출하기 때문에 맵핑 구문이
	중복되지 않게 분류하여 관리할 수 있다.
	테이블 이름을 바탕으로 namespace를 지정하고 맵핑 구문의 id 속성의
	값은 SQL 문의 맥락에 따라서 명명하는 것이 일반적 이다.
	
	parameterType 속성에는 주로 SQL 문의 조건에 사용할 파라미터의
	데이터 타입을 지정하는 속성으로 자바 원시 타입(기본 타입, String)과 자바빈,
	Map과 같은 타입을 지정할 수 있다. resultType 속성도 parameterType
	속성에서 지정한 타입을 많이 사용한다. parameterType과 resultType에
	지정할 데이터 타입이 자바 원시 타입이면 생략가능하다.
	
	http://www.mybatis.org/mybatis-3/ko/index.html 참고
-->
<mapper namespace="com.springstudy.bbs.mapper.BoardMapper" >

	<!--
		게시 글 리스트를 가져오는 맵핑 구문
		
		테이블의 컬럼명은 일반적으로 언더스코어 표기법("_")을 사용하는 경우가
		많고 클래스의 인스턴스 맴버는 카멜표기법을 사용한다.
		테이블의 컬럼명과 모델 클래스의 프로퍼티 이름이 다른 경우 아래와 같이
		SELECT 쿼리에 별칭을 사용해 모델 클래스의 프로퍼티 이름과 동일하게
		맞춰야 한다. 그렇지 않으면 오류는 발생하지 않지만 데이터를 읽어 올
		수 없다. 
		
		SELECT read_count AS readCount FROM springbbs
		
		resultType에 Board를 지정하고 DAO 클래스에서 SqlSession의 
		selectList() 메서드를 호출하면 List<Board> 객체로 받을 수 있다.	
		
		아래는 테이블에 언더스코어 표기법으로 작성된 컬럼이 있기 때문에 이 컬럼의
		값은 제대로 읽어오지 못한다. 그래서 이 맵퍼 파일 맨 아래에 resultMap을
		boardResultMap으로 선언하고 아래 select 태그에 resultMap을
		boardResultMap으로 지정하면 모든 컬럼의 값을 읽어 올 수 있다.
	-->
	<select id="boardList" resultType="Board" resultMap="boardResultMap">
		SELECT 
			* 
		FROM springbbs 
		ORDER BY no DESC
	</select>
	
	<!--
		no에 해당하는 게시 글 하나를 가져오는 맵핑 구문
		
		resultMap 속성을 사용해 아래에서 resultMap 태그로 정의한 id를 지정하면 SQL
		쿼리에 컬럼명의 별칭을 사용하지 않고 자바 모델 객체로 변환할 수 있다.		
		
		root-context.xml에서 SqlSessionFactoryBean를 Bean으로 정의할 때 
		typeAliasesPackage를 com.springstudy.bbs.domain으로 지정했기
		때문에 resultType에 클래스 이름만 지정했다.
		
		DAO에서 no에 해당하는 게시 글을 조회할 때 기본형인 no를 selectOne()
		메서드의 두 번째 인수로 지정했기 때문에 parameterType은 생략할 수 있다.
		
		SQL문의 조건에 사용할 파라미터는 아래와 같이 #{} 로 감싸서 지정하면 된다.
	-->
	<select id="getBoard" resultType="Board" resultMap="boardResultMap">
		SELECT 
			* 
		FROM springbbs 
		WHERE no = #{no}
	</select>
	
	<!-- 
		게시 글을 테이블에 추가하는 맵핑 구문
			
		아래는 DAO 클래스의 insertBoard(Board board) 메서드에서
		사용하는 맵핑 구문으로 parameterType을 Board 타입으로 지정했다.
		parameterType에 모델 클래스 타입을 지정하는 경우 VALUES()에 
		지정하는 값은 getter 메서드를 지정하는 것이 아니라 클래스의 프로퍼티
		(인스턴스 변수)를 #{}로 감싸서 지정하면 MyBatis가 알아서 처리해 준다.
		 
		SqlSessionTemplate의 insert() 메서드의 반환 타입이 int 이므로
		resultType은 생략 가능하다.
		
		테이블에 하나의 레코드를 INSERT 할때 자동으로 증가되는 컬럼이나
		Sequence를 사용하는 컬럼의 값을 읽어 와야 할 때도 있다.
		보통 자동 증가되는 컬럼의 값은 데이터가 INSERT 된 후에 읽어오고
		Sequence일 경우 INSERT 이전에 값을 읽어 와야 한다.
		이렇게 INSERT 작업을 하면서 생성된 키의 값을 읽어 와야 할 경우
		아래와 같이 useGeneratedKeys="true"를 지정하고 자동 생성된
		키의 값을 설정할 자바 모델 객체의 프로퍼티 이름을 keyProperty에
		지정하면 Board 객체의 no 프로퍼티에 값을 설정해 준다.	
	-->
	<insert id="insertBoard" parameterType="Board"
		useGeneratedKeys="true" keyProperty="no">
		INSERT INTO springbbs(title, writer, content, 
				reg_date, read_count, pass)
				
			VALUES(#{title}, #{writer}, #{content}, 
				SYSDATE(), #{readCount}, #{pass})
	</insert>
	
	<!--
		게시판 테이블에서 no에 해당하는 게시 글의 비밀번호를 가져오는 맵핑 구문
	
		아래는 DAO 클래스의 isPassCheck(int no, String pass) 메서드에서
		사용하는 맵핑 구문으로 DAO에서 게시 글 번호인 no에 해당하는 게시 글의
		비밀번호를 조회할 때 selectOne() 메서드의 두 번째 인수로 기본형인 no를
		지정했기 때문에 parameterType은 생략할 수 있다.
		
		SQL문의 조건에 사용할 파라미터는 아래와 같이 #{} 로 감싸서 지정하면 된다. 
	-->
	<select id="isPassCheck" resultType="String">
		SELECT 
			pass
		FROM springbbs
		WHERE no = #{no}
	</select>
	
	<!--
		게시판 테이블에서 no에 해당하는 게시 글을 수정하는 맵핑 구문	
		
		아래는 DAO 클래스의 updateBoard(Board board) 메서드에서
		사용하는 맵핑 구문으로 parameterType을 Board 타입으로 지정했다.
		parameterType에 모델 클래스 타입을 지정하는 경우 VALUES()에 
		지정하는 값은 getter 메서드를 지정하는 것이 아니라 클래스의 프로퍼티
		(인스턴스 변수)를 #{}로 감싸서 지정하면 MyBatis가 알아서 처리해 준다. 
		
		SqlSessionTemplate의 update() 메서드의 반환 타입이 int 이므로
		resultType은 생략 가능하다.  
	-->
	<update id="updateBoard" parameterType="Board">
		UPDATE springbbs 
			SET title = #{title}, content = #{content},
				reg_date = SYSDATE()
		WHERE no = #{no}
	</update>
	
	<!--
		게시판 테이블에서 no에 해당하는 게시 글을 삭제하는 맵핑 구문	
		
		아래는 DAO 클래스의 deleteBoard(int no) 메서드에서 사용하는
		맵핑 구문으로 parameterType은 int 형이므로 생략했다.
		
		SqlSessionTemplate의 delete() 메서드의 반환 타입이 int 이므로
		resultType은 생략 가능하다.  
	-->
	<delete id="deleteBoard">
		DELETE FROM springbbs
		WHERE no = #{no}
	</delete>
	
	<!--
		Board 클래스의 프로퍼티와 테이블의 컬럼을 맵핑하는 ResultMap
		 
		테이블에 언터스코어 표기법으로 작성된 컬럼이 존재하면 도메인 객체의
		카멜케이스된 프로퍼티를 통해 컬럼의 값을 제대로 읽어오지 못한다.
		아래와 같이 resultMap을 정의해 테이블의 컬럼과 도메인 객체의
		프로퍼티를 설정하면 제대로 읽어 올 수 있다.
		
		resultMap 태그에 type 속성은 쿼리 결과를 매핑할 자바 도메인 객체를
		지정하고 그 하부에 <id> 태그를 사용해 기본키 컬럼을 지정한다.
		나머지 컬럼은 <result> 태그를 사용해 지정하면 도메인 객체로 맵핑할 수 있다.  
	-->
	<resultMap id="boardResultMap" type="Board">
		<id property="no" column="no" />
		<result property="title" column="title" />
		<result property="writer" column="writer" />
		<result property="content" column="content" />
		<result property="regDate" column="reg_date" />
		<result property="readCount" column="read_count" />
		<result property="pass" column="pass" />
		<result property="file1" column="file1" />
	</resultMap>
</mapper>	



