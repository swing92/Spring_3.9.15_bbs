<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
	맵퍼의 namespace 속성은 맵핑 구문을 그룹핑 하는 역할을 한다.
	여러 맵퍼에서 맵핑 구문의 id 속성의 값이 중복되더라도 namespace와
	맵핑 구문의 id 속성에 지정한 값을 합쳐서 호출하기 때문에 맵핑 구문이
	중복되지 않게 분류하여 관리할 수 있다.
	테이블 이름을 바탕으로 namespace를 지정하고 맵핑 구문의 id 속성의
	값은 SQL 문의 맥락에 따라서 명명하는 것이 일반적 이다.
	
	parameterType 속성에는 주로 SQL 문의 조건에 사용할 파라미터의
	데이터 타입을 지정하는 속성으로 자바 원시 타입(기본 타입, String)과 자바빈,
	Map과 같은 타입을 지정할 수 있다. resultType 속성도 parameterType
	속성에서 지정한 타입을 많이 사용한다. parameterType과 resultType에
	지정할 데이터 타입이 자바 원시 타입이면 생략가능하다.
	
	마이바티스 참고 사이트
	  - http://blog.mybatis.org/
	  - http://www.mybatis.org/mybatis-3/ko/index.html
-->
<mapper namespace="com.springclass.bbs.mapper.BoardMapper" >
	
	<!-- table의 컬럼명은 언더스코어표기법("_")을 주로 사용 -->
	<!-- class의 인스턴스 멤버는 카멜표기법을 주로 사용 -->
	<!-- 고로 컬럼명이랑 모델클래스의 프로퍼티 이름을 맞춰줘야함. 안한다고 오류가 나는건 아닌데 데이터를 못읽어와 -->
	
	<resultMap id="boardResultMap" type="Board">
		<id property="no" column="no"/>
		<result property="title" column="title"/>
		<result property="writer" column="writer"/>
		<result property="content" column="content"/>
		<result property="regDate" column="reg_date"/>
		<result property="readCount" column="read_count"/>
		<result property="pass" column="pass"/>
		<result property="file1" column="file1"/>
	</resultMap>
	
	
	<!-- 게시글 리스트 가져오는 맵핑구문 -->
	<select id="boardList" resultType="Board" resultMap="boardResultMap">
		SELECT * FROM springbbs ORDER BY no DESC
	</select>
	
	
	<!-- resultMap 태그로 정의한 id를 지정하면 SQL쿼리에 컬럼명의 별칭을 사용하지 않고 자바 모델 객체로 변환가능 -->
	<!-- BoardDao에서 no에 해당하는 게시글을 조회할 때 기본형인 no를 selectOne()메소드의 두 번째 인수로 지정했기 때문에 parameterType 생략 가능 -->
	<!-- >>>>>>> return sqlSession.selectOne(NAME_SPACE + ".getBoard", no); <<<<<<< -->
	<!-- SQL문의 조건에 사용할 파라미터는 #{}로 감싸서 지정하면 됨 -->
	
	<!-- no에 해당하는 게시글 하나를 가져오는 맵핑구문 -->
	<select id="getBoard" resultType="Board" resultMap="boardResultMap">
		SELECT * FROM springbbs WHERE no = #{no}
	</select>
	
	
	<!-- 
		parameterType에 모델 클래스 타입을 지정하는 경우 VALUES()에 지정하는 값은 getter 메서드를 지정하는 것이 아니라
		클래스의 프로퍼티(인스턴스 변수)를 #{}로 감싸서 지정하면 MyBatis가 알아서 처리해 줌
	 -->
	 <!-- SqlSessionTemplate의 insert() 메서드의 반환 타입이 int 이므로 resultType은 생략 가능 -->
	 <!-- 
	 	테이블에 하나의 레코드를 INSERT 할때 자동으로 증가되는 컬럼이나 Sequence를 사용하는 컬럼의 값을 읽어 와야 할 때도 있다.
		보통 자동 증가되는 컬럼의 값은 데이터가 INSERT 된 후에 읽어오고, Sequence일 경우 INSERT 이전에 값을 읽어 와야 한다.
		이렇게 INSERT 작업을 하면서 생성된 키의 값을 읽어 와야 할 경우 useGeneratedKeys="true"를 지정하고
		자동 생성된 키의 값을 설정할 자바 모델 객체의 프로퍼티 이름을 keyProperty에 지정하면
		Board 객체의 no 프로퍼티에 값을 설정해 준다. -->
	
	<!-- 게시글을 테이블에 추가하는 맵핑구문 -->
	<insert id="insertBoard" parameterType="Board" useGeneratedKeys="true" keyProperty="no">
		INSERT INTO springbbs(title, writer, content, reg_date, read_count, pass) VALUES(#{title}, #{writer}, #{content}, SYSDATE(), #{readCount}, #{pass})
	</insert>
	
	
	<!-- DAO클래스의 isPassCheck(int no, String pass) 메소드에서 사용하는 맵핑구문 -->
	<!-- DAO에서 게시글 번호인 no에 해당하는 게시글의 비밀번호를 조회할 때 selectOne()메소드의 두번째 인수로 기본형인 no를 지정했기 때문에 parameterType 생략 가능 -->
	
	<!-- 게시판 테이블에서 no에 해당하는 게시글의 비밀번호를 가져오는 맵핑구문 -->
	<select id="isPassCheck" resultType="String">
		SELECT pass FROM springbbs WHERE no = #{no}
	</select>
	
	
	<!-- 게시판 테이블에서 no에 해당하는 게시글을 수정하는 맵핑구문 -->
	<!-- DAO클래스의 updateBoard(Board board) 매소드에서 사용 -->
	<update id="updateBoard" parameterType="Board">
		UPDATE springbbs SET title = #{title}, content = #{content}, reg_date = SYSDATE() WHERE no = #{no}
	</update>
	
</mapper>	



